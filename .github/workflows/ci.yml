name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run type check
        run: npm run typecheck

      - name: Check formatting (if prettier available)
        run: |
          if npm run | grep -q "format:check"; then
            npm run format:check
          else
            echo "No format:check script found, skipping"
          fi

      - name: Security audit
        run: npm audit --audit-level=moderate

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      matrix:
        workspace: [api, plugin, shared]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests for ${{ matrix.workspace }}
        run: |
          if [ -d "${{ matrix.workspace }}" ]; then
            cd ${{ matrix.workspace }}
            if [ -f "package.json" ] && npm run | grep -q "test"; then
              npm test -- --coverage --passWithNoTests
            else
              echo "No tests found for ${{ matrix.workspace }}"
            fi
          else
            echo "Directory ${{ matrix.workspace }} not found"
          fi

      - name: Upload coverage
        if: success() && hashFiles('${{ matrix.workspace }}/coverage/lcov.info') != ''
        uses: codecov/codecov-action@v3
        with:
          file: ./${{ matrix.workspace }}/coverage/lcov.info
          flags: ${{ matrix.workspace }}
          name: ${{ matrix.workspace }}-coverage

  # Job 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: quality
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: translator
          POSTGRES_PASSWORD: translator123
          POSTGRES_DB: translator_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run database migrations
        if: hashFiles('api/migrations/**') != ''
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: translator_test
          DB_USER: translator
          DB_PASSWORD: translator123
        run: |
          cd api
          if npm run | grep -q "migrate:test"; then
            npm run migrate:test
          elif npm run | grep -q "migrate"; then
            npm run migrate
          else
            echo "No migration script found"
          fi

      - name: Run integration tests
        env:
          DB_HOST: localhost
          REDIS_HOST: localhost
          NODE_ENV: test
        run: |
          if npm run | grep -q "test:integration"; then
            npm run test:integration
          else
            echo "No integration tests found, skipping"
          fi

  # Job 4: E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Start services with Docker Compose
        run: |
          if [ -f ".env.example" ]; then
            cp .env.example .env.test
          fi
          if [ -f "docker-compose.test.yml" ]; then
            docker-compose -f docker-compose.test.yml up -d
            sleep 30
          else
            echo "No docker-compose.test.yml found, using docker-compose.yml"
            docker-compose up -d
            sleep 30
          fi

      - name: Run E2E tests
        run: |
          if npm run | grep -q "test:e2e"; then
            npm run test:e2e
          else
            echo "No E2E tests found, skipping"
          fi

      - name: Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results
          path: |
            cypress/screenshots
            cypress/videos
            playwright-report/
            test-results/
            logs/

  # Job 5: Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push API image
        if: hashFiles('api/Dockerfile') != ''
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: true
          tags: ${{ steps.meta.outputs.tags }}-api
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Plugin image
        if: hashFiles('plugin/Dockerfile') != ''
        uses: docker/build-push-action@v5
        with:
          context: ./plugin
          push: true
          tags: ${{ steps.meta.outputs.tags }}-plugin
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 6: Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  # Job 7: Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start services
        run: |
          if [ -f "docker-compose.test.yml" ]; then
            docker-compose -f docker-compose.test.yml up -d
          else
            docker-compose up -d
          fi
          sleep 30

      - name: Run k6 performance tests
        if: hashFiles('performance/**') != ''
        uses: grafana/k6-action@v0.3.0
        with:
          filename: performance/api-load-test.js
          flags: --out json=performance-results.json
        continue-on-error: true

      - name: Upload performance report
        if: hashFiles('performance-results.json') != ''
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: performance-results.json

  # Job 8: Build Status
  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [quality, unit-tests, integration-tests, e2e-tests, build, security]
    if: always()
    steps:
      - name: Check build status
        run: |
          echo "Quality: ${{ needs.quality.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Security: ${{ needs.security.result }}"

          if [ "${{ needs.quality.result }}" != "success" ] ||
             [ "${{ needs.unit-tests.result }}" != "success" ] ||
             [ "${{ needs.integration-tests.result }}" != "success" ] ||
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "❌ Build failed - critical jobs unsuccessful"
            exit 1
          else
            echo "✅ Build successful - all critical jobs passed"
          fi