repos:
  # Pre-commit hooks for general file management
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        exclude: '\.md$'
      - id: end-of-file-fixer
        exclude: '\.md$'
      - id: check-yaml
        args: ['--unsafe']
      - id: check-json
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable

  # JavaScript/TypeScript linting
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.56.0
    hooks:
      - id: eslint
        files: \.(js|jsx|ts|tsx)$
        args: ['--fix', '--max-warnings=0']
        additional_dependencies:
          - eslint@^8.0.0
          - '@typescript-eslint/eslint-plugin@^6.0.0'
          - '@typescript-eslint/parser@^6.0.0'

  # Prettier formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.1.0
    hooks:
      - id: prettier
        files: \.(js|jsx|ts|tsx|json|yaml|yml|md|css|scss|html)$
        args: ['--write']

  # Security scanning with semgrep
  - repo: https://github.com/returntocorp/semgrep
    rev: v1.45.0
    hooks:
      - id: semgrep
        args: ['--config=auto', '--error', '--skip-unknown-extensions']
        exclude: 'node_modules/|\.git/|\.env'

  # Docker linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: ['--ignore', 'DL3008', '--ignore', 'DL3009']

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        args: ['-e', 'SC1091', '-e', 'SC2034']

  # Local hooks for project-specific checks
  - repo: local
    hooks:
      - id: typecheck
        name: TypeScript Type Check
        entry: bash -c 'npm run typecheck || echo "TypeScript check failed - please fix type errors"'
        language: system
        pass_filenames: false
        files: \.(ts|tsx)$
        stages: [commit]

      - id: test-changed
        name: Run Tests on Changed Files
        entry: bash -c '
          if git diff --cached --name-only | grep -E "\.(js|jsx|ts|tsx)$" > /dev/null; then
            echo "Running tests for changed files..."
            npm test -- --passWithNoTests --findRelatedTests $(git diff --cached --name-only | grep -E "\.(js|jsx|ts|tsx)$" | tr "\n" " ")
          else
            echo "No JS/TS files changed, skipping tests"
          fi
        '
        language: system
        pass_filenames: false
        stages: [commit]

      - id: security-audit
        name: Security Audit
        entry: bash -c '
          echo "Running npm audit..."
          npm audit --audit-level=moderate || {
            echo "Security vulnerabilities found. Please run: npm audit fix"
            exit 1
          }
        '
        language: system
        pass_filenames: false
        stages: [commit]

      - id: lint-staged-files
        name: Lint Staged Files
        entry: bash -c '
          staged_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E "\.(js|jsx|ts|tsx)$" || true)
          if [ -n "$staged_files" ]; then
            echo "Linting staged files: $staged_files"
            npx eslint $staged_files --fix --max-warnings=0
            git add $staged_files
          fi
        '
        language: system
        pass_filenames: false
        stages: [commit]

      - id: check-package-lock
        name: Check package-lock.json
        entry: bash -c '
          if git diff --cached --name-only | grep -q "package\.json$"; then
            if ! git diff --cached --name-only | grep -q "package-lock\.json$"; then
              echo "package.json changed but package-lock.json was not updated."
              echo "Please run: npm install"
              exit 1
            fi
          fi
        '
        language: system
        pass_filenames: false
        stages: [commit]

      - id: check-env-example
        name: Check .env.example
        entry: bash -c '
          if git diff --cached --name-only | grep -q "\.env$"; then
            echo "Warning: .env file changes detected."
            echo "Please ensure .env.example is updated if new variables were added."
          fi
        '
        language: system
        pass_filenames: false
        stages: [commit]

      - id: check-docker-compose
        name: Validate Docker Compose
        entry: bash -c '
          for file in docker-compose*.yml; do
            if [ -f "$file" ]; then
              echo "Validating $file..."
              docker-compose -f "$file" config >/dev/null 2>&1 || {
                echo "Invalid Docker Compose file: $file"
                exit 1
              }
            fi
          done
        '
        language: system
        pass_filenames: false
        files: docker-compose.*\.yml$
        stages: [commit]

      - id: check-api-docs
        name: Check API Documentation
        entry: bash -c '
          api_files=$(git diff --cached --name-only | grep -E "api/.*\.(js|ts)$" || true)
          if [ -n "$api_files" ]; then
            echo "API files changed. Please ensure documentation is updated."
            echo "Consider updating: docs/api.md or OpenAPI specifications"
          fi
        '
        language: system
        pass_filenames: false
        stages: [commit]

  # Commit message linting
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v3.0.0
    hooks:
      - id: conventional-pre-commit
        stages: [commit-msg]
        args: [
          'feat', 'fix', 'docs', 'style', 'refactor',
          'perf', 'test', 'chore', 'ci', 'build'
        ]

# Configuration
default_stages: [commit]
fail_fast: false
default_language_version:
  node: '18.19.0'